<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee" xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/jdbc
		http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee
		http://www.springframework.org/schema/jee/spring-jee-3.0.xsd">

	<!-- =================================================================================== -->
	<!-- **** SUPPORTING LIFE PERSISTENCE **** -->
	<!-- =================================================================================== -->

	<!-- Facilitates EntityManager injection in Spring i.e. @PersistentContext 
		annotation will be handled -->
	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

	<!-- Facilitates Exception Translation i.e. @Repository annotation will 
		be handled. Exceptions will be translated to one of Spring's unified data 
		access exceptions -->
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>


	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="supportingLifeDataSource"/>
		<property name="packagesToScan" value="ie.ucc.bis.supportinglife.ccm.domain"/> <!-- scans for entities (model) -->
		<property name="persistenceProvider">
			<bean class="org.hibernate.ejb.HibernatePersistence"/>
		</property>
		<property name="jpaProperties">
			<props>
			<!--	<prop key="hibernate.hbm2ddl.auto">create-drop</prop> -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>

	<!-- Development Profile: use single connection configuration to connect 
		to DB -->
	<beans profile="development">
		<bean id="supportingLifeDataSource" class="org.apache.commons.dbcp.BasicDataSource">
			<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
			<property name="url" value="jdbc:mysql://localhost:3306/supportinglifedb?zeroDateTimeBehavior=convertToNull"/>
			<property name="username" value="supporting_user"/>
			<property name="password" value="supporting_pw_14"/>
			<property name="validationQuery" value="/* ping */ SELECT 1"/>
			<property name="testWhileIdle" value="true"/>
		</bean>
	</beans>

	<!-- Production Profile: Use apache pooling to create a pool of DB connections -->
	<beans profile="production">
		<bean id="supportingLifeDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
			<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
			<property name="url" value="#{systemProperties['JDBC_CONNECTION_STRING']}"/>
			<property name="username" value="#{systemProperties['AWS_ACCESS_KEY_ID']}"/>
			<property name="password" value="#{systemProperties['AWS_SECRET_KEY']}"/>
			<property name="validationQuery" value="/* ping */ SELECT 1"/>
			<property name="testWhileIdle" value="true"/>
		</bean>
	</beans>
 
	<!-- =================================================================================== -->
	<!-- **** END OF SUPPORTING LIFE PERSISTENCE **** -->
	<!-- =================================================================================== -->

</beans>